pipeline {
    agent any
    
    tools {
        terraform 'teraaa'
    }
    parameters {
        string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
    }
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {

        stage('checkout') {
            steps {
                checkout scm
            }
        }

        stage('Apply') {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }

            steps {
                dir("Part_2/003_terraform") {
                    sh 'pwd'
                    sh 'ls'
                    sh 'terraform version'
                    def exists = fileExists '../002_mykey/mykey'
                    if (exists) {
                         echo 'Yes dont create one'
                    } else {
                        echo 'No'
                        sh 'ssh-keygen -b 2048 -t rsa -f ../002_mykey/mykey -q -N ""'
                    }
                    sh "terraform init -input=false"
                    sh "terraform apply -input=false"
                    
                }
            }
        }

        stage('Destroy') {
            when {
                equals expected: true, actual: params.destroy
            }

            steps {
                dir("Part_2/003_terraform") {
                    sh 'pwd'
                    sh "terraform destroy --auto-approve"
                }
            }
        }

    }
}