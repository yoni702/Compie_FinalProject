pipeline {
    agent any
    

    parameters {
        string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'S3', defaultValue: false, description: 'Terraform Create-S3 for tfState')
        booleanParam(name: 'terraform', defaultValue: false, description: 'Terraform build Infrastucture')
        booleanParam(name: 'docker', defaultValue: false, description: 'Docker Build & Push to Ecr')
        booleanParam(name: 'deploy', defaultValue: false, description: 'Deploy To EKS Cluster')
        booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
    }
    
    environment {
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_ACCOUNT_ID="227029025754"
        AWS_DEFAULT_REGION="us-east-2" 
        IMAGE_REPO_NAME="yoni_ecr"
        IMAGE_TAG="1.1"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"

    }

    stages {

        stage('CheckOut') {
            steps {

                checkout scm
            }
        }

            
        stage('Terraform S3 ') {
            when {
                equals expected: true, actual: params.S3
            }

            steps {
                dir("Part_2/003_RemoteState") {
                    sh 'pwd'
                    sh 'ls'
                    sh "terraform init -input=false"
                    sh "terraform apply --auto-approve -input=false"
                }
            }
        }

        stage('Terraform Apply') {
            when {
                equals expected: true, actual: params.terraform
            }
            steps {
                dir("Part_2/003_terraform") {
                    sh 'pwd'
                    sh 'ls'
                    sh "terraform init -input=false -reconfigure "
                    sh "terraform apply --auto-approve -input=false"
                }

            }
        }
        
        stage('Logging into AWS ECR') {
            when {
                equals expected: true, actual: params.docker
            }
            steps {
                script {
                 sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION}  --profile=default| docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }   
            }
        }

    
        stage('Building image') {
            when {
                equals expected: true, actual: params.docker
            }
            steps{
                dir("Part_2/guestbook-go") {
                    
                    sh "docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} --pull=true /var/lib/jenkins/workspace/wwww/Part_2/guestbook-go \
                        && docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
   

        stage('Pushing  to ECR') {
            when {
                equals expected: true, actual: params.docker
            }
            steps{  
                script {
        
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                    //sh "docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy in EKS Cluster') {
            when {
                equals expected: true, actual: params.deploy
            }
            steps {
                dir("Part_2/guestbook-go") {
                    sh "aws eks --region us-east-2 update-kubeconfig --name yoni-eks"
                    sh "aws ecr list-images --repository-name yoni_ecr --region=us-east-2"
                    sh "kubectl get all"
                    sh 'kubectl apply -f redis-master-controller.json'
                    sh 'kubectl apply -f redis-master-service.json'
                    sh 'kubectl apply -f redis-slave-controller.json'
                    sh 'kubectl apply -f redis-slave-service.json'
                    sh 'kubectl apply -f guestbook-controller.json'
                    sh 'kubectl apply -f guestbook-service.json'

                }
            }
        }


        stage('Destroy') {
            when {
                equals expected: true, actual: params.destroy
            }

            steps {
                dir("Part_2/003_terraform") {
                    sh 'pwd'
                    sh "terraform destroy --auto-approve"
                }
            }
        }

    }
}